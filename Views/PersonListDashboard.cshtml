@*
This is a shape template. It looks just like an ordinary view template, but the Model object is the shape we've created with New.PersonListDashboard()
in ContentsAdminController. Therefore it also has the dynamic properties we filled up in the controller, so we'll also use them.

Be warned, this won't look too nice from the browser, but probably we can live with it for now :-).
*@

@*TitleForPage also adds the title to the title tag*@
<h1>@Html.TitleForPage(T("Person List dashboard").ToString())</h1>


@* When the id is 0 we display the editor for a new item *@
@Html.Link(T("Create new Person List").Text, Url.Action("PersonListDashboard", new { Id = 0 }))

@*
Displaying an ad-hoc shape. As you can see we can create shapes here as well through the New property. We can also pass it arguments just as we
did from the controller. This shape will be rendered by the Views/ComplimentaryEncouragement template but having a template with the same name
in our theme we can override it (also see: http://docs.orchardproject.net/Documentation/Alternates).

When developing an Orchard module it's good practice to divide the ouput into shapes each containing some logically coherent part. This way the
templates of those parts can be individually overridden from the theme, giving fine-grained control over the resulting markup.

That's a bit similar to the standard MVC RenderPartial().

Also notice that we use the WorkContext object: it's also in IOrchardServices and contains much contextual data (including the current user).
Feel free to look into it!
*@
<h2>@T("Complimentary encouragement")</h2>
@Display(New.ComplimentaryEncouragement(Name: WorkContext.CurrentUser.UserName))


<h2>@T("Edit Person List")</h2>
@Html.ValidationSummary(T("The Person List could not be edited. Please correct the errrors below.").ToString())

@* The editor shape only contains the inside of the form, so we have to wrap it into a form. The method we use here builds a XSS-protected form. *@
@using (Html.BeginFormAntiForgeryPost())
{
    @Display(Model.EditorShape())
}

@*NEXT STATION: Go back to Controllers/ContentsAdminController!*@